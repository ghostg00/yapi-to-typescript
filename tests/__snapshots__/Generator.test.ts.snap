// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator 正确生成代码并写入文件 - 全部分类: 接口文件 1`] = `
"/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, FileData, prepare } from 'yapi-to-typescript'

import request from \\"./request\\"

const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export function deleteMethodTest(requestData: DeleteMethodTestRequest): Promise<DeleteMethodTestResponse> {
  return request(prepare(deleteMethodTest.requestConfig, requestData))
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
deleteMethodTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/deleteMethod_test\\",
  undefined,
  string
>)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export function getMethodTest(requestData: GetMethodTestRequest): Promise<GetMethodTestResponse> {
  return request(prepare(getMethodTest.requestConfig, requestData))
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
getMethodTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/getMethod_test\\",
  undefined,
  string
>)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export function json5ResponseTest(requestData?: Json5ResponseTestRequest): Promise<Json5ResponseTestResponse> {
  return request(prepare(json5ResponseTest.requestConfig, requestData))
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
json5ResponseTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Response_test\\",
  undefined,
  string
>)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestRequest {
  id: number;
  name: string;
  likes: {}[];
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export function json5RequestTest(requestData: Json5RequestTestRequest): Promise<Json5RequestTestResponse> {
  return request(prepare(json5RequestTest.requestConfig, requestData))
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
json5RequestTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Request_test\\",
  undefined,
  string
>)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export function postMethodTest(requestData: PostMethodTestRequest): Promise<PostMethodTestResponse> {
  return request(prepare(postMethodTest.requestConfig, requestData))
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
postMethodTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/postMethod_test\\",
  undefined,
  string
>)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export function putMethodTest(requestData: PutMethodTestRequest): Promise<PutMethodTestResponse> {
  return request(prepare(putMethodTest.requestConfig, requestData))
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
putMethodTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/putMethod_test\\",
  undefined,
  string
>)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export function dataKeyExampleTest(requestData: DataKeyExampleTestRequest): Promise<DataKeyExampleTestResponse> {
  return request(prepare(dataKeyExampleTest.requestConfig, requestData))
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
dataKeyExampleTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/dataKeyExample_test\\",
  undefined,
  string
>)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export function noResponseDataTest(requestData?: NoResponseDataTestRequest): Promise<NoResponseDataTestResponse> {
  return request(prepare(noResponseDataTest.requestConfig, requestData))
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
noResponseDataTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/noResponseData_test\\",
  undefined,
  string
>)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export function emptyResponseTest(requestData?: EmptyResponseTestRequest): Promise<EmptyResponseTestResponse> {
  return request(prepare(emptyResponseTest.requestConfig, requestData))
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
emptyResponseTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/emptyResponse_test\\",
  undefined,
  string
>)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export function testTest(requestData: TestTestRequest): Promise<TestTestResponse> {
  return request(prepare(testTest.requestConfig, requestData))
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
testTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar'
>)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export function hihihiTest(requestData: HihihiTestRequest): Promise<HihihiTestResponse> {
  return request(prepare(hihihiTest.requestConfig, requestData))
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
hihihiTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"hihihi\\",\\"id\\"],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id'
>)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export function rawResponseTest(requestData?: RawResponseTestRequest): Promise<RawResponseTestResponse> {
  return request(prepare(rawResponseTest.requestConfig, requestData))
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
rawResponseTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/rawResponse_test\\",
  undefined,
  string
>)

const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export function get2Test(requestData?: Get2TestRequest): Promise<Get2TestResponse> {
  return request(prepare(get2Test.requestConfig, requestData))
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
get2Test.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/get2_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/get2_test\\",
  undefined,
  string
>)

const mockUrl_0_0_0_3 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_3 = \\"\\" as any
const prodUrl_0_0_0_3 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export function picture_3dDetailTest(requestData?: Picture_3dDetailTestRequest): Promise<Picture_3dDetailTestResponse> {
  return request(prepare(picture_3dDetailTest.requestConfig, requestData))
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
picture_3dDetailTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/issue-17/picture_3d_detail_test\\",
  undefined,
  string
>)"
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 请求文件 1`] = `
"import { RequestFunction } from 'yapi-to-typescript'

/** 是否是生产环境 */
const isProd = false

/**
 * 请求函数。
 *
 * **注意**：若 dataKey 不为空，取得接口返回值后，应类似这样返回结果：
 *
 * \`\`\`js
 * return dataKey ? (response[dataKey] || response) : response
 * \`\`\`
 */
const request: RequestFunction = ({
  /** 接口 Mock 地址，结尾无 \`/\` */
  mockUrl,
  /** 接口测试环境地址，结尾无 \`/\` */
  devUrl,
  /** 接口生产环境地址，结尾无 \`/\` */
  prodUrl,
  /** 接口路径，以 \`/\` 开头 */
  path,
  /** 请求方法 */
  method,
  /** 请求数据类型 */
  requestBodyType,
  /** 返回数据类型 */
  responseBodyType,
  /** 接口返回值中数据所在的键 */
  dataKey,
  /** 请求数据，不含文件数据 */
  data,
  /** 请求文件数据 */
  fileData
}): Promise<any> => {
  return new Promise((resolve, reject) => {
    /** 请求地址 */
    const url = \`\${isProd ? prodUrl : mockUrl}\${path}\`

    /** 是否含有文件数据 */
    const hasFileData = Object.keys(fileData).length > 0

    // 在这里实现请求逻辑
  })
}

export default request"
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 输出内容 1`] = `
Array [
  "",
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export function deleteMethodTest(requestData: DeleteMethodTestRequest): Promise<DeleteMethodTestResponse> {
  return request(prepare(deleteMethodTest.requestConfig, requestData))
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
deleteMethodTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/deleteMethod_test\\",
  undefined,
  string
>)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export function getMethodTest(requestData: GetMethodTestRequest): Promise<GetMethodTestResponse> {
  return request(prepare(getMethodTest.requestConfig, requestData))
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
getMethodTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/getMethod_test\\",
  undefined,
  string
>)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export function json5ResponseTest(requestData?: Json5ResponseTestRequest): Promise<Json5ResponseTestResponse> {
  return request(prepare(json5ResponseTest.requestConfig, requestData))
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
json5ResponseTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Response_test\\",
  undefined,
  string
>)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestRequest {
  id: number;
  name: string;
  likes: {}[];
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export function json5RequestTest(requestData: Json5RequestTestRequest): Promise<Json5RequestTestResponse> {
  return request(prepare(json5RequestTest.requestConfig, requestData))
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
json5RequestTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Request_test\\",
  undefined,
  string
>)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export function postMethodTest(requestData: PostMethodTestRequest): Promise<PostMethodTestResponse> {
  return request(prepare(postMethodTest.requestConfig, requestData))
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
postMethodTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/postMethod_test\\",
  undefined,
  string
>)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export function putMethodTest(requestData: PutMethodTestRequest): Promise<PutMethodTestResponse> {
  return request(prepare(putMethodTest.requestConfig, requestData))
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
putMethodTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/putMethod_test\\",
  undefined,
  string
>)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export function dataKeyExampleTest(requestData: DataKeyExampleTestRequest): Promise<DataKeyExampleTestResponse> {
  return request(prepare(dataKeyExampleTest.requestConfig, requestData))
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
dataKeyExampleTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/dataKeyExample_test\\",
  undefined,
  string
>)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export function noResponseDataTest(requestData?: NoResponseDataTestRequest): Promise<NoResponseDataTestResponse> {
  return request(prepare(noResponseDataTest.requestConfig, requestData))
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
noResponseDataTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/noResponseData_test\\",
  undefined,
  string
>)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export function emptyResponseTest(requestData?: EmptyResponseTestRequest): Promise<EmptyResponseTestResponse> {
  return request(prepare(emptyResponseTest.requestConfig, requestData))
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
emptyResponseTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/emptyResponse_test\\",
  undefined,
  string
>)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export function testTest(requestData: TestTestRequest): Promise<TestTestResponse> {
  return request(prepare(testTest.requestConfig, requestData))
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
testTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar'
>)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export function hihihiTest(requestData: HihihiTestRequest): Promise<HihihiTestResponse> {
  return request(prepare(hihihiTest.requestConfig, requestData))
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
hihihiTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"hihihi\\",\\"id\\"],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id'
>)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export function rawResponseTest(requestData?: RawResponseTestRequest): Promise<RawResponseTestResponse> {
  return request(prepare(rawResponseTest.requestConfig, requestData))
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
rawResponseTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/rawResponse_test\\",
  undefined,
  string
>)",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export function get2Test(requestData?: Get2TestRequest): Promise<Get2TestResponse> {
  return request(prepare(get2Test.requestConfig, requestData))
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
get2Test.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/get2_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/get2_test\\",
  undefined,
  string
>)",
  "const mockUrl_0_0_0_3 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_3 = \\"\\" as any
const prodUrl_0_0_0_3 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export function picture_3dDetailTest(requestData?: Picture_3dDetailTestRequest): Promise<Picture_3dDetailTestResponse> {
  return request(prepare(picture_3dDetailTest.requestConfig, requestData))
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
picture_3dDetailTest.requestConfig = Object.freeze({
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
} as RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/issue-17/picture_3d_detail_test\\",
  undefined,
  string
>)",
]
`;
